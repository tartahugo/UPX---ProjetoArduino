#include <Arduino.h>
#include <WiFi.h>
#include "EmonLib.h" //adiciona a biblioteca
EnergyMonitor emonl; //cria uma instância
float ruido = 0.033; //Variável para ruído do sensor
int tensao = 5; //Tensão usado no projeto
#define LAMP 19//Define o LAMP como 8

#include <Firebase_ESP_Client.h>

// Provide the token generation process info.
#include <addons/TokenHelper.h>

// Provide the RTDB payload printing info and other helper functions.
#include <addons/RTDBHelper.h>

/* 1. Define the WiFi credentials */
#define WIFI_SSID "Rodneyjade_2G"
#define WIFI_PASSWORD "h2127hugo"

/* 2. Define the API Key */
#define API_KEY "AIzaSyCelstr8Hy7YDDn_xX8Io8MiqAwyC82mHE"

/* 3. Define the RTDB URL */
#define DATABASE_URL "upxx-df824-default-rtdb.firebaseio.com"


#define USER_EMAIL "hugoewada@hotmail.com"
#define USER_PASSWORD "123456789"

int LDR;//Variável para a leitura do LDR
int cont;//Variável utilizada para armazenar os valores lidos pelo sensor
int i;//Variável para contagem

// Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;

unsigned long count = 0;

void setup()
{

  Serial.begin(115200);
  pinMode(LAMP,OUTPUT);//Define o pino D8 como saída
 digitalWrite(LAMP, HIGH);//Inicia em estado Lógico Alto, no caso, relé desligado
  
   emonl.current(4, 10);//Corrente: pino, calibração

#if defined(ARDUINO_RASPBERRY_PI_PICO_W)
  multi.addAP(WIFI_SSID, WIFI_PASSWORD);
  multi.run();
#else
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
#endif

  Serial.print("Connecting to Wi-Fi");
  unsigned long ms = millis();
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);

  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the user sign in credentials */
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h


  Firebase.reconnectNetwork(true);

 
  fbdo.setBSSLBufferSize(4096 , 1024 );

  // Limit the size of response payload to be collected in FirebaseData
  fbdo.setResponseSize(2048);

  Firebase.begin(&config, &auth);

  Firebase.setDoubleDigits(5);

  config.timeout.serverResponse = 10 * 1000;

  
}

void loop()
{

   delay(1000);
  
  double Irms = emonl.calcIrms(1480); // calcula a corrente
  Irms = (Irms - ruido) * 1000; // Tira o ruido      
  
  if (Irms < 0)
    {
        Irms = 0;
    }  
  
  char ls = Serial.read();// variavel para ler oque vem da serial
    
  if (ls == 'R') // Se for R muda o estado do Relé
    {
        
        digitalWrite(LAMP, !digitalRead(LAMP));   
    }
  
  if (LDR > 600) //se a resistencia do ldr for maio que 600, comuta o relé
    {
        Serial.println("Luz Desligada");    
    }
  else if (LDR <= 600) // -- -- -- menor -- --, -- desligado.
    {
        Serial.println("Luz Ligada");
    }
    
  
  Serial.print("Corrente: ");
  Serial.print(Irms);
  Serial.println(" mA");
  delay(500);
    
          
 LDR=0;//Zera a variável LDR
 for(i=0;i<=10;i++)//Faz 10 vezes a leitura do sensor 
  {
 cont=analogRead(15);//Lê o valor do sensor (LDR ligado ao pino A0) e guarda na variável LDR
 LDR = LDR+cont;//Armazenamento na varíavel LDR o valor lido + o valor anterior
 delay(10);//Delay se 10 milissegundos
 }
 LDR=LDR/10;//Divide o valor armazenado por 10
 Serial.println(LDR);//Imprime o valor do LDR

 (LDR >= 600) ? (digitalWrite(LAMP,HIGH)) : (digitalWrite(LAMP,LOW));

  // Firebase.ready() should be called repeatedly to handle authentication tasks.

  if (Firebase.ready() && (millis() - sendDataPrevMillis > 15000 || sendDataPrevMillis == 0))
  {
    sendDataPrevMillis = millis();

    Serial.printf("Set bool... %s\n", Firebase.RTDB.setBool(&fbdo, F("/test/bool"), count % 2 == 0) ? "ok" : fbdo.errorReason().c_str());

    Serial.printf("Get bool... %s\n", Firebase.RTDB.getBool(&fbdo, FPSTR("/test/bool")) ? fbdo.to<bool>() ? "true" : "false" : fbdo.errorReason().c_str());

    bool bVal;
    Serial.printf("Get bool ref... %s\n", Firebase.RTDB.getBool(&fbdo, F("/test/bool"), &bVal) ? bVal ? "true" : "false" : fbdo.errorReason().c_str());

    Serial.printf("Set int... %s\n", Firebase.RTDB.setInt(&fbdo, F("/test/int"), LDR) ? "ok" : fbdo.errorReason().c_str());

    Serial.printf("Get int... %s\n", Firebase.RTDB.getInt(&fbdo, F("/test/int")) ? String(fbdo.to<int>()).c_str() : fbdo.errorReason().c_str());

    int iVal = 0;
    Serial.printf("Get int ref... %s\n", Firebase.RTDB.getInt(&fbdo, F("/test/int"), &iVal) ? String(iVal).c_str() : fbdo.errorReason().c_str());

    Serial.printf("Set float... %s\n", Firebase.RTDB.setFloat(&fbdo, F("/test/float"), Irms) ? "ok" : fbdo.errorReason().c_str());

    Serial.printf("Get float... %s\n", Firebase.RTDB.getFloat(&fbdo, F("/test/float")) ? String(fbdo.to<float>()).c_str() : fbdo.errorReason().c_str());


    // For the usage of FirebaseJson, see examples/FirebaseJson/BasicUsage/Create_Edit_Parse.ino
    FirebaseJson json;

    if (count == 0)
    {
      json.set("value/round/" + String(count), F("cool!"));
      json.set(F("value/ts/.sv"), F("timestamp"));
      Serial.printf("Set json... %s\n", Firebase.RTDB.set(&fbdo, F("/test/json"), &json) ? "ok" : fbdo.errorReason().c_str());
    }
    else
    {
      json.add(String(count), F("smart!"));
      Serial.printf("Update node... %s\n", Firebase.RTDB.updateNode(&fbdo, F("/test/json/value/round"), &json) ? "ok" : fbdo.errorReason().c_str());
    }

    Serial.println();
    count++;
  }
}
